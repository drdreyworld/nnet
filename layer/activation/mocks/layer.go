// Code generated by MockGen. DO NOT EDIT.
// Source: layer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockActivationFunc is a mock of ActivationFunc interface
type MockActivationFunc struct {
	ctrl     *gomock.Controller
	recorder *MockActivationFuncMockRecorder
}

// MockActivationFuncMockRecorder is the mock recorder for MockActivationFunc
type MockActivationFuncMockRecorder struct {
	mock *MockActivationFunc
}

// NewMockActivationFunc creates a new mock instance
func NewMockActivationFunc(ctrl *gomock.Controller) *MockActivationFunc {
	mock := &MockActivationFunc{ctrl: ctrl}
	mock.recorder = &MockActivationFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActivationFunc) EXPECT() *MockActivationFuncMockRecorder {
	return m.recorder
}

// Forward mocks base method
func (m *MockActivationFunc) Forward(v float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Forward", v)
	ret0, _ := ret[0].(float64)
	return ret0
}

// Forward indicates an expected call of Forward
func (mr *MockActivationFuncMockRecorder) Forward(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forward", reflect.TypeOf((*MockActivationFunc)(nil).Forward), v)
}

// Backward mocks base method
func (m *MockActivationFunc) Backward(v float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backward", v)
	ret0, _ := ret[0].(float64)
	return ret0
}

// Backward indicates an expected call of Backward
func (mr *MockActivationFuncMockRecorder) Backward(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backward", reflect.TypeOf((*MockActivationFunc)(nil).Backward), v)
}
